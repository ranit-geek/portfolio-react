{"version":3,"sources":["components/landingpage.js","components/aboutme.js","components/contact.js","components/projects.js","components/resume.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","react_default","a","createElement","Component","AboutMe","Contact","Projects","Resume","Main","Switch","Route","exact","path","component","App","className","index_es","numParticles","style","position","width","height","lib","title","scroll","Link","to","href","main","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAUeA,mLANP,OACIC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kCAJSC,aCSXC,mLANP,OACIJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kCAJKC,aCSPE,mLANP,OACIL,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kCAJKC,aCSPG,mLANP,OACIN,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kCAJMC,aCSRI,mLANP,OACIP,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,iCAJIC,aCmBNK,EAXF,kBACTR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACIT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjCC,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWT,IAClCJ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWR,IAClCL,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWP,IACnCN,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWN,cCgC1BO,mLAtCX,OACEd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACff,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACIC,aAAc,IACdC,MAAO,CACLC,SAAU,WACVC,MAAO,OACPC,OAAQ,UAIhBrB,EAAAC,EAAAC,cAACoB,EAAA,OAAD,KACItB,EAAAC,EAAAC,cAACoB,EAAA,OAAD,CAAQC,MAAM,oBAAoBC,QAAM,GACpCxB,EAAAC,EAAAC,cAACoB,EAAA,WAAD,KACItB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAG,WAAT,UACA1B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAG,YAAT,YACA1B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAG,aAAT,YACA1B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAG,YAAT,aAGR1B,EAAAC,EAAAC,cAACoB,EAAA,OAAD,CAAQC,MAAM,SACVvB,EAAAC,EAAAC,cAACoB,EAAA,WAAD,KACItB,EAAAC,EAAAC,cAAA,KAAGyB,KAAK,KAAR,QACA3B,EAAAC,EAAAC,cAAA,KAAGyB,KAAK,KAAR,QACA3B,EAAAC,EAAAC,cAAA,KAAGyB,KAAK,KAAR,QACA3B,EAAAC,EAAAC,cAAA,KAAGyB,KAAK,KAAR,UAGR3B,EAAAC,EAAAC,cAACoB,EAAA,QAAD,KACItB,EAAAC,EAAAC,cAAA,OAAKa,UAAU,iBACff,EAAAC,EAAAC,cAAC0B,EAAD,gBAhCMzB,aCKE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oFCTNC,IAASC,OACTnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACApC,EAAAC,EAAAC,cAACmC,EAAD,OAEEC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8c7b7501.chunk.js","sourcesContent":["import React , {Component} from 'react'\nclass LandingPage extends Component\n{\n    render(){\n        return(\n            <div><h1>Landing Page</h1></div>\n        )\n    }\n}\n\nexport default LandingPage","import React , {Component} from 'react'\nclass AboutMe extends Component\n{\n    render(){\n        return(\n            <div><h1>Aboutme Page</h1></div>\n        )\n    }\n}\n\nexport default AboutMe","import React , {Component} from 'react'\nclass Contact extends Component\n{\n    render(){\n        return(\n            <div><h1>Contact Page</h1></div>\n        )\n    }\n}\n\nexport default Contact","import React , {Component} from 'react'\nclass Projects extends Component\n{\n    render(){\n        return(\n            <div><h1>Project Page</h1></div>\n        )\n    }\n}\n\nexport default Projects","import React , {Component} from 'react'\nclass Resume extends Component\n{\n    render(){\n        return(\n            <div><h1>Resume Page</h1></div>\n        )\n    }\n}\n\nexport default Resume","import React from 'react'\nimport {Switch, Route } from 'react-router-dom'\n\nimport LandingPage from './landingpage'\nimport AboutMe from './aboutme'\nimport Contact from './contact'\nimport Projects from './projects'\nimport Resume from './resume'\n\nconst Main = ()=>(\n    <Switch>\n        <Route exact path=\"/\" component={LandingPage}/>\n        <Route path=\"/AboutMe\" component={AboutMe}/>\n        <Route path=\"/Contact\" component={Contact}/>\n        <Route path=\"/Projects\" component={Projects}/>\n        <Route path=\"/Resume\" component={Resume}/>\n    </Switch>\n)\n\n\nexport default Main","import React, { Component } from 'react';\nimport './App.css';\nimport {Layout, Header, Navigation, Drawer, Content, Grid, Cell} from 'react-mdl'\nimport ParticleAnimation from 'react-particle-animation'\nimport Main from './components/main'\nimport {Link} from 'react-router-dom'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <ParticleAnimation\n          numParticles={500}\n          style={{\n            position: 'absolute',\n            width: '100%',\n            height: '100%'\n          }}\n        />\n    \n    <Layout>\n        <Header title=\"Ranit's Portfolio\" scroll>\n            <Navigation>\n                <Link to=\"/Resume\">Resume</Link>\n                <Link to=\"/AboutMe\">About Me</Link>\n                <Link to=\"/Projects\">Projects</Link>\n                <Link to=\"/Contact\">Contact</Link>\n            </Navigation>\n        </Header>\n        <Drawer title=\"Title\">\n            <Navigation>\n                <a href=\"/\">Link</a>\n                <a href=\"/\">Link</a>\n                <a href=\"/\">Link</a>\n                <a href=\"/\">Link</a>\n            </Navigation>\n        </Drawer>\n        <Content>\n            <div className=\"page-content\" />\n            <Main/>\n        </Content>\n    </Layout>\n</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n<BrowserRouter>\n<App />\n</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}